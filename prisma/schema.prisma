// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // binaryTargets   = ["native", "linux-musl"]
  // binaryTargets   = ["native"]
  previewFeatures = ["referentialIntegrity"]
  // "debian-openssl-1.1.x" is for compatibility with netlify
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  unregistered
  registered
}

model User {
  id            String     @id @default(uuid())
  wallet        String?    @unique
  name          String?
  image         String?
  firstName     String?
  lastName      String?
  description   String?
  bio           String?
  phoneNumber   String?
  phoneVerified DateTime?
  email         String?    @unique
  emailVerified DateTime?
  profilePicUrl String?
  joinDate      DateTime   @default(now())
  status        UserStatus @default(unregistered)

  validated   Validations[] @relation("Validator")
  validations Validations[] @relation("Receiver")

  accounts       Account[]
  sessions       Session[]
  SugestedSkills SugestedSkill[]

  @@index([wallet], type: Hash)
  @@index([email], type: Hash)
}

model Validations {
  Validator   User   @relation("Validator", fields: [validatorId], references: [id], onDelete: Cascade) // No ghost validators
  validatorId String
  Receiver    User   @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  Skill       Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId     String

  score Int

  @@id([validatorId, receiverId, skillId])
  @@index([receiverId], type: Hash)
}

model Skill {
  id          String        @id @default(uuid())
  name        String
  description String
  validations Validations[]
  active      Boolean       @default(true)
}

model SugestedSkill {
  id          String @id @default(uuid())
  name        String
  description String
  proposer    User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String
}

// Next Auth

model OAuth2Profile {
  id                String  @id @default(cuid())
  email_verified    Boolean @default(false)
  email             String?
  image             String?
  name              String?
  otherFields       Json?
  provider          String
  providerAccountId String
  // account           Account? @relation(fields: [provider, providerAccountId], references: [provider, providerAccountId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  // OAuth2Profile OAuth2Profile[]
  proofOfKnoly proofOfKnoly[]

  @@unique([provider, providerAccountId])
  @@index([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Logging

model Log {
  level     String
  meta      Json?
  timestamp DateTime @default(now())
  id        Int      @id @default(autoincrement())
  message   Json

  @@index([timestamp], map: "log_timestamp_idx")
}

model ScrapedData {
  id             String        @id @default(uuid())
  added          DateTime      @default(now())
  userId         String?
  data           Json?
  proofOfKnoly   proofOfKnoly? @relation(fields: [proofOfKnolyId], references: [id])
  proofOfKnolyId String?
}

model proofOfKnoly {
  id          String        @id @default(uuid())
  source      Account?      @relation(fields: [accountId], references: [id])
  dataSources ScrapedData[]
  content     Json
  accountId   String?
}
